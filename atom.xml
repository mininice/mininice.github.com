<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[你不在乎我的过往 看到了我的翅膀 你说被火烧过 才能出现凤凰 逆风的方向 更适合飞翔 我不怕千万人阻挡 只怕自己投降]]></title>
  <link href="http://mininice.github.io/atom.xml" rel="self"/>
  <link href="http://mininice.github.io/"/>
  <updated>2013-10-09T13:37:27+08:00</updated>
  <id>http://mininice.github.io/</id>
  <author>
    <name><![CDATA[mininice]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[YUI3组件框架之plugin]]></title>
    <link href="http://mininice.github.io/blog/2013/10/09/plugin/"/>
    <updated>2013-10-09T10:05:00+08:00</updated>
    <id>http://mininice.github.io/blog/2013/10/09/plugin</id>
    <content type="html"><![CDATA[<p>plugin功能包括如下几个模块， 简单分析如下：</p>

<h3>pluginhost-base</h3>

<p>维护对象 this.<em>plugins = {}；
提供方法: <br/>
plug<br/>
unplug <br/>
hasplug   <br/>
</em>destroyPlugins</p>

<p><em>initPlugins: 调用模块 pluginhost-config 中的</em>initConfigPlugins(config);</p>

<ul>
<li>根据this._classes(原型链上的constructor对象)上的静态属性 _PLUG and _UNPLUG, 来初始化plugin</li>
<li>通过widget初始化时的config配置, 来初始化plugin</li>
<li>在YUI Widget体系中base-core模块用来初始化插件, 初始化所有ext和ATTRS后调用</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">PluginHost</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_initConfigPlugins</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Class Configuration</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">classes</span> <span class="o">=</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_getClasses</span><span class="p">)</span> <span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">_getClasses</span><span class="p">()</span> <span class="o">:</span> <span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">constructor</span><span class="p">],</span>
</span><span class='line'>        <span class="nx">plug</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>        <span class="nx">unplug</span> <span class="o">=</span> <span class="p">{},</span>
</span><span class='line'>        <span class="nx">constructor</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">classPlug</span><span class="p">,</span> <span class="nx">classUnplug</span><span class="p">,</span> <span class="nx">pluginClassName</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// TODO: Room for optimization. Can we apply statically/unplug in same pass?</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="nx">classes</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">constructor</span> <span class="o">=</span> <span class="nx">classes</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">classUnplug</span> <span class="o">=</span> <span class="nx">constructor</span><span class="p">.</span><span class="nx">_UNPLUG</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">classUnplug</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// subclasses over-write</span>
</span><span class='line'>            <span class="nx">Y</span><span class="p">.</span><span class="nx">mix</span><span class="p">(</span><span class="nx">unplug</span><span class="p">,</span> <span class="nx">classUnplug</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">classPlug</span> <span class="o">=</span> <span class="nx">constructor</span><span class="p">.</span><span class="nx">_PLUG</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">classPlug</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// subclasses over-write</span>
</span><span class='line'>            <span class="nx">Y</span><span class="p">.</span><span class="nx">mix</span><span class="p">(</span><span class="nx">plug</span><span class="p">,</span> <span class="nx">classPlug</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">pluginClassName</span> <span class="k">in</span> <span class="nx">plug</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">plug</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">pluginClassName</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">unplug</span><span class="p">[</span><span class="nx">pluginClassName</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">plug</span><span class="p">(</span><span class="nx">plug</span><span class="p">[</span><span class="nx">pluginClassName</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// User Configuration</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">config</span> <span class="o">&amp;&amp;</span> <span class="nx">config</span><span class="p">.</span><span class="nx">plugins</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">plug</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">plugins</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h4>plug</h4>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">Plugin</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">L</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">Plugin</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">config</span> <span class="o">=</span> <span class="nx">Plugin</span><span class="p">.</span><span class="nx">cfg</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">Plugin</span> <span class="o">=</span> <span class="nx">Plugin</span><span class="p">.</span><span class="nx">fn</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Plugin should be fn by now </span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">Plugin</span> <span class="o">&amp;&amp;</span> <span class="nx">Plugin</span><span class="p">.</span><span class="nx">NS</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">ns</span> <span class="o">=</span> <span class="nx">Plugin</span><span class="p">.</span><span class="nx">NS</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">config</span> <span class="o">=</span> <span class="nx">config</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>    <span class="nx">config</span><span class="p">.</span><span class="nx">host</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">hasPlugin</span><span class="p">(</span><span class="nx">ns</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Update config </span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">ns</span><span class="p">].</span><span class="nx">setAttrs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">[</span><span class="nx">ns</span><span class="p">].</span><span class="nx">setAttrs</span><span class="p">(</span><span class="nx">config</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Create new instance </span>
</span><span class='line'>        <span class="k">this</span><span class="p">[</span><span class="nx">ns</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Plugin</span><span class="p">(</span><span class="nx">config</span><span class="p">);</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">_plugins</span><span class="p">[</span><span class="nx">ns</span><span class="p">]</span> <span class="o">=</span> <span class="nx">Plugin</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>pluginhost-config</h3>

<ul>
<li>_initConfigPlugins</li>
<li>静态方法： plug、unplug</li>
<li>提供给Y.Base引用</li>
</ul>


<h3>base-pluginhost</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">mixin</span> <span class="nx">Base</span> <span class="nx">and</span> <span class="nx">PluginHost</span><span class="err">，</span> <span class="err">即：</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Y</span><span class="p">.</span><span class="nx">mix</span><span class="p">(</span><span class="nx">Base</span><span class="p">,</span> <span class="nx">PluginHost</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nx">Base</span><span class="p">.</span><span class="nx">plug</span> <span class="o">=</span> <span class="nx">PluginHost</span><span class="p">.</span><span class="nx">plug</span><span class="p">;</span>
</span><span class='line'><span class="nx">Base</span><span class="p">.</span><span class="nx">unplug</span> <span class="o">=</span> <span class="nx">PluginHost</span><span class="p">.</span><span class="nx">unplug</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>plugin</h3>

<ol>
<li>继承Y.Base</li>
<li>提供AOP的一系列方法， 如：</li>
</ol>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">doBefore</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">strMethod</span><span class="p">,</span> <span class="nx">fn</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;host&quot;</span><span class="p">),</span> <span class="nx">handle</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">strMethod</span> <span class="k">in</span> <span class="nx">host</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// method</span>
</span><span class='line'>        <span class="nx">handle</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">beforeHostMethod</span><span class="p">(</span><span class="nx">strMethod</span><span class="p">,</span> <span class="nx">fn</span><span class="p">,</span> <span class="nx">context</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">host</span><span class="p">.</span><span class="nx">on</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// event</span>
</span><span class='line'>        <span class="nx">handle</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onHostEvent</span><span class="p">(</span><span class="nx">strMethod</span><span class="p">,</span> <span class="nx">fn</span><span class="p">,</span> <span class="nx">context</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">handle</span><span class="p">;</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="nx">doAfter</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="nx">onHostEvent</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">handle</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;host&quot;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">fn</span><span class="p">,</span> <span class="nx">context</span> <span class="o">||</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_handles</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">handle</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">handle</span><span class="p">;</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="nx">afterHostEvent</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="nx">beforeHostMethod</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="nx">afterHostMethod</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>总结</h3>

<h4>如何写一个插件</h4>

<p>1、 任何简单对象即可成为一个简单插件， 如:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">NodeDrag</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">host</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">drag</span><span class="p">(</span><span class="nx">host</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">drag</span><span class="p">(</span><span class="nx">host</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2、YUI的Plugin基类提供了基于事件的AOP机制支持，可以通过继承它在不影响原有代码逻辑前提下，通过对代码执行过程的控制，达到改变原有代码逻辑或者增加插件功能的效果， 如：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">NodeDrag</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">NodeDrag</span><span class="p">.</span><span class="nx">superclass</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">Y</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">NodeDrag</span><span class="p">,</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">Plugin</span><span class="p">.</span><span class="nx">Base</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">drag</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h4>使用插件的几种方式</h4>

<p>给一个node节点添加一个插件</p>

<p>1、使用Base的静态方法, 实际调用的是pluginhost-config里面的plug方法</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Y</span><span class="p">.</span><span class="nx">Base</span><span class="p">.</span><span class="nx">plug</span><span class="p">(</span><span class="nx">Y</span><span class="p">.</span><span class="nx">one</span><span class="p">(</span><span class="s1">&#39;#foo&#39;</span><span class="p">),</span> <span class="nx">NodeDrag</span><span class="p">,</span> <span class="nx">config</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>2、node对象和继承了Y.Base对象的实例都可以通过实例直接调用plug方法使用插件</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Y</span><span class="p">.</span><span class="nx">one</span><span class="p">(</span><span class="s1">&#39;#foo&#39;</span><span class="p">).</span><span class="nx">plug</span><span class="p">(</span><span class="nx">NodeDrag</span><span class="p">,</span> <span class="nx">config</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>3、具体widget</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">Widget</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'><span class="nx">Y</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">Widget</span><span class="p">,</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">Base</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">initializer</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">w</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Widget</span><span class="p">({</span><span class="nx">plugins</span><span class="o">:</span> <span class="nx">NodeDrag</span><span class="p">});</span>
</span><span class='line'><span class="c1">//var w = new Widget({plugins: [NodeDrag, ..]});</span>
</span><span class='line'><span class="c1">//var w = new Widget({plugins: {fn: NodeDrag, cfg: {} });</span>
</span><span class='line'><span class="c1">//w.plug(NodeDrag, cfg);</span>
</span></code></pre></td></tr></table></div></figure>


<p>在一些情况，为了让调用者不必过多的关心实现细节的时候，也将插件的初始化放到具体widget的实现中, 如：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Widget</span><span class="p">.</span><span class="nx">ATTRS</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">drag</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">value</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">Y</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">Widget</span><span class="p">,</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">Base</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">initializer</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;drag&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">plug</span><span class="p">(</span><span class="nx">NodeDrag</span><span class="p">,</span> <span class="nx">cfg</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据类型及转换]]></title>
    <link href="http://mininice.github.io/blog/2013/10/08/dui-xiang-lei-xing-he-biao-da-shi-yun-suan/"/>
    <updated>2013-10-08T19:36:00+08:00</updated>
    <id>http://mininice.github.io/blog/2013/10/08/dui-xiang-lei-xing-he-biao-da-shi-yun-suan</id>
    <content type="html"><![CDATA[<p>此篇数据类型和转换只限于ECMA规范，规范用了比较大的篇幅讲数据类型和类型转换，理解了这个最基本的概念对表达式、语句、执行环境、对象及继承都有非常大的帮助，遂整理如下：</p>

<h3>数据类型和值</h3>

<table>
  <tbody>
    <tr>
      <th width="100px">数据类型</th>
      <th>值demo</th>
      <th colspan="1">备注</th>
    </tr>
    <tr>
      <td>Undefined</td>
      <td>undefined</td>
      <td colspan="1">
        <span style="color: rgb(0,0,0);">当声明的变量未初始化时，该变量的默认值是 undefined</span>
      </td>
    </tr>
    <tr>
      <td colspan="1">Null</td>
      <td colspan="1">null</td>
      <td colspan="1">
        <span style="color: rgb(0,0,0);">typeof null == &#8220;object&#8221;</span>
      </td>
    </tr>
    <tr>
      <td colspan="1">Boolean</td>
      <td colspan="1">true、false</td>
      <td colspan="1">
        <span style="color: rgb(0,0,0);">
          <span>有且只有</span>两个值</span>
      </td>
    </tr>
    <tr>
      <td colspan="1">String</td>
      <td colspan="1"> &#8217;abc&#8217;, &#8220;abc&#8221;</td>
      <td colspan="1">
        <span style="color: rgb(0,0,0);">所有有限的零个或多个 16 位无符号整数值（“元素”）的有序序列</span>
      </td>
    </tr>
    <tr>
      <td colspan="1">Number</td>
      <td colspan="1"> <span style="color: rgb(0,0,0);">如5、12、-5、2e5、NaN</span>
      </td>
      <td colspan="1"> </td>
    </tr>
    <tr>
      <td colspan="1">Object</td>
      <td colspan="1">{}, []</td>
      <td colspan="1">
        <p class="li1">原生对象，包括内置对象和<span style="color: rgb(0,100,0);">程序执行过程中构建的对象</span>
        </p>
      </td>
    </tr>
  </tbody>
</table>


<h3>ECMAScript其它的一些数据类型， 大多数类型在语言内部使用</h3>

<table>
  <tbody>
    <tr>
      <th>数据类型</th>
      <th>备注</th>
    </tr>
    <tr>
      <td colspan="1">引用规范类型</td>
      <td colspan="1">
        <span style="color: rgb(0,0,0);">引用类型用来说明 delete，typeof，赋值运算符这些运算符的行为</span>
      </td>
    </tr>
    <tr>
      <td colspan="1">列表规范类型</td>
      <td colspan="1">
        <span style="color: rgb(0,0,0);">列表类型用于说明 new 表达式，函数调用，其他需要值的简单列表的算法 &#8211; 里的参数列表的计算</span>
      </td>
    </tr>
    <tr>
      <td colspan="1">完结规范类型</td>
      <td colspan="1">
        <span style="color: rgb(0,0,0);">完结类型用于说明执行将控制转移到外部的声明 (break, continue, return, throw) 的行为</span>
      </td>
    </tr>
    <tr>
      <td colspan="1">
        <p>属性描述符及属性标识符规范类型</p>
      </td>
      <td colspan="1">
        <span style="color: rgb(0,0,0);">属性描述符类型是用来解释命名属性的具体的操作的特性集</span>
      </td>
    </tr>
    <tr>
      <td colspan="1">词法环境和环境记录项规范类型</td>
      <td colspan="1">作用域及作用域链的相关定义会使用</td>
    </tr>
  </tbody>
</table>


<h3>类型转换</h3>

<p>表达式运算的重要前提是类型转换</p>

<table style="text-align: center;">
  <tbody>
    <tr>
      <th>输入类型</th>
      <th>
        <p>ToPrimitive</p>
      </th>
      <th colspan="1">
        <p>ToBoolean</p>
      </th>
      <th colspan="1">
        <span style="color: rgb(0,51,102);">ToNumber</span>
      </th>
      <th colspan="1">
        <span style="color: rgb(0,51,102);">ToString</span>
      </th>
      <th colspan="1">
        <span style="color: rgb(0,51,102);">ToObject</span>
      </th>
    </tr>
    <tr>
      <td>Undefined</td>
      <td>不转换</td>
      <td colspan="1">false</td>
      <td colspan="1">NaN</td>
      <td colspan="1">&#8220;undefined&#8221;</td>
      <td colspan="1">
        <span style="color: rgb(0,0,0);">TypeError</span>
      </td>
    </tr>
    <tr>
      <td>Null</td>
      <td>
        <span>不转换</span>
      </td>
      <td colspan="1">false</td>
      <td colspan="1">+0</td>
      <td colspan="1">&#8220;null&#8221;</td>
      <td colspan="1">
        <span style="color: rgb(0,0,0);">TypeError</span>
      </td>
    </tr>
    <tr>
      <td>Boolean</td>
      <td>
        <span>不转换</span>
      </td>
      <td colspan="1">不转换</td>
      <td colspan="1">false为+0，true为1</td>
      <td colspan="1">true=&gt;&#8221;true&#8221;, false=&gt;&#8221;false&#8221;</td>
      <td colspan="1">
        <p>new Boolean(参数)，<span style="color: rgb(0,0,0);font-size: 10.0pt;line-height: 13.0pt;">设置[[PrimitiveValue]] 为参数值</span>
        </p>
      </td>
    </tr>
    <tr>
      <td>Number</td>
      <td>
        <span>不转换</span>
      </td>
      <td colspan="1">[+-]0、<span style="color: rgb(0,0,0);">NaN</span>转换为false， else true</td>
      <td colspan="1">不转换</td>
      <td colspan="1">见规范9.8.1</td>
      <td colspan="1">
        <span>new Number(参数)，</span>
        <span style="color: rgb(0,0,0);">设置[[PrimitiveValue]] 为参数值</span>
      </td>
    </tr>
    <tr>
      <td>String</td>
      <td>
        <span>不转换</span>
      </td>
      <td colspan="1">空字符串转换为false，else true</td>
      <td colspan="1">转化比较复杂，见规范9.3.1</td>
      <td colspan="1">不转换</td>
      <td colspan="1">
        <span>new String(参数)，</span>
        <span style="color: rgb(0,0,0);">设置[[PrimitiveValue]] 为参数值</span>
      </td>
    </tr>
    <tr>
      <td colspan="1">Object</td>
      <td colspan="1">
        <p>
          <span style="color: rgb(0,0,0);">调用该对象的内部方法</span>
        </p>
        <p>
          <span style="color: rgb(0,0,0);">[[DefaultValue]]返回值</span>
        </p>
      </td>
      <td colspan="1">
        <span style="color: rgb(0,0,0);">true</span>
      </td>
      <td colspan="1">
        <p style="text-align: center;">
          <code style="font-size: 10.0pt;line-height: 13.0pt;">ToNumber</code>
          <span style="font-size: 10.0pt;line-height: 13.0pt;">(</span> <code>ToPrimitive</code>( hint:数值类型)<span style="font-size: 10.0pt;line-height: 13.0pt;">)</span>
        </p>
      </td>
      <td colspan="1">
        <p>
          <code style="text-align: center;">ToString</code>
          <span>(</span> <code>ToPrimitive</code>( hint:字符串值类型)<span style="font-size: 10.0pt;line-height: 13.0pt;">)</span>
        </p>
      </td>
      <td colspan="1">不转换</td>
    </tr>
  </tbody>
</table>


<h3>[[ DefaultValue ]](hint)算法</h3>

<ol>
<li><p>无参数时：</p>

<ul>
<li>hint = (O instanceof Date) ? &ldquo;字符串值类型&#8221; : &#8220;数字类型&rdquo;</li>
<li>[[ DefaultValue ]](hint)</li>
</ul>
</li>
<li><p>参数为字符串类型： </p>

<ul>
<li>调用对象的toString方法， 如果存在且返回结果是原始值，返回该原始值</li>
<li>调用对象的valueOf方法， 如果存在且返回结果是原始值，返回该原始值</li>
<li>否则抛出一个 TypeError 异常</li>
</ul>
</li>
<li><p>参数为数字类型：</p>

<ul>
<li>调用对象的valueOf方法， 如果存在且返回结果是原始值，返回该原始值</li>
<li>调用对象的toString方法， 如果存在且返回结果是原始值，返回该原始值</li>
<li>否则抛出一个 TypeError 异常</li>
</ul>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[矩阵打印]]></title>
    <link href="http://mininice.github.io/blog/2013/09/22/ju-zhen-da-yin/"/>
    <updated>2013-09-22T14:30:00+08:00</updated>
    <id>http://mininice.github.io/blog/2013/09/22/ju-zhen-da-yin</id>
    <content type="html"><![CDATA[<p>在群里看到一道题目, 按一定的方式打印矩阵中相应位置的值</p>

<p><img src="http://mininice.github.io/images/timu.jpg"></p>

<h3>看到题目直接写的代码草稿:</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">getNum</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">type</span><span class="p">,</span> <span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">exp</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;i&quot;</span><span class="p">,</span> <span class="s2">&quot;i * (n-1) +1&quot;</span><span class="p">,</span> <span class="s2">&quot;(n-1)*n+i&quot;</span><span class="p">,</span> <span class="s2">&quot;n*(n-i-1) + (n-i)&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;=</span><span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">type</span> <span class="o">===</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nb">eval</span><span class="p">(</span><span class="nx">exp</span><span class="p">[</span><span class="nx">type</span><span class="p">]));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">type</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">i</span> <span class="o">!==</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nb">eval</span><span class="p">(</span><span class="nx">exp</span><span class="p">[</span><span class="nx">type</span><span class="p">]));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">type</span> <span class="o">===</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="nx">i</span> <span class="o">!==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nb">eval</span><span class="p">(</span><span class="nx">exp</span><span class="p">[</span><span class="nx">type</span><span class="p">]));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">type</span> <span class="o">===</span> <span class="mi">3</span> <span class="o">&amp;&amp;</span> <span class="nx">i</span> <span class="o">!==</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nb">eval</span><span class="p">(</span><span class="nx">exp</span><span class="p">[</span><span class="nx">type</span><span class="p">]));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">getNum</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">arr</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">})(</span><span class="mi">5</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>代码解耦:</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">getNum</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">exp</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;i&quot;</span><span class="p">,</span> <span class="s2">&quot;i * (n-1) +1&quot;</span><span class="p">,</span> <span class="s2">&quot;(n-1)*n+i&quot;</span><span class="p">,</span> <span class="s2">&quot;n*(n-i-1) + (n-i)&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;=</span><span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">type</span> <span class="o">===</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">temp</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nb">eval</span><span class="p">(</span><span class="nx">exp</span><span class="p">[</span><span class="nx">type</span><span class="p">]));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">type</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">i</span> <span class="o">!==</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">temp</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nb">eval</span><span class="p">(</span><span class="nx">exp</span><span class="p">[</span><span class="nx">type</span><span class="p">]));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">type</span> <span class="o">===</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="nx">i</span> <span class="o">!==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">temp</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nb">eval</span><span class="p">(</span><span class="nx">exp</span><span class="p">[</span><span class="nx">type</span><span class="p">]));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">type</span> <span class="o">===</span> <span class="mi">3</span> <span class="o">&amp;&amp;</span> <span class="nx">i</span> <span class="o">!==</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">temp</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nb">eval</span><span class="p">(</span><span class="nx">exp</span><span class="p">[</span><span class="nx">type</span><span class="p">]));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">temp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">temp</span> <span class="o">=</span> <span class="nx">getNum</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">i</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">arr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">temp</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">})(</span><span class="mi">5</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>代码最终优化后：</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">getNum</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">exp</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;i&quot;</span><span class="p">,</span> <span class="s2">&quot;i * (n-1) +1&quot;</span><span class="p">,</span> <span class="s2">&quot;(n-1)*n+i&quot;</span><span class="p">,</span> <span class="s2">&quot;n*(n-i-1) + (n-i)&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;=</span><span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">type</span> <span class="o">===</span> <span class="mi">1</span> <span class="o">||</span> <span class="p">((</span><span class="nx">type</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">type</span> <span class="o">===</span> <span class="mi">3</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">i</span> <span class="o">!==</span> <span class="nx">n</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>        <span class="p">(</span><span class="nx">type</span> <span class="o">===</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="nx">i</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">temp</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nb">eval</span><span class="p">(</span><span class="nx">exp</span><span class="p">[</span><span class="nx">type</span><span class="p">]));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">temp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">arr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">getNum</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">i</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">})(</span><span class="mi">5</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然目前这个code只能满足从1开始递增的数据, 当然如果是随意的矩阵， 只需要将n维矩阵转换为一维数组，同时结果作为数组下标即可得到输出；</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EC+VO+SCOPE for ES3]]></title>
    <link href="http://mininice.github.io/blog/2013/09/18/ec-plus-vo-plus-scope-for-es3/"/>
    <updated>2013-09-18T23:11:00+08:00</updated>
    <id>http://mininice.github.io/blog/2013/09/18/ec-plus-vo-plus-scope-for-es3</id>
    <content type="html"><![CDATA[<h2>词法环境</h2>

<h4>词法作用域</h4>

<p>词法作用域（lexcical scope）。即JavaScript变量的作用域是在定义时决定而不是执行时决定，也就是说词法作用域取决于源码。</p>

<h4>词法环境</h4>

<p>用于定义特定变量和函数标识符在ECMAScript代码的词法嵌套结构上的关联关系， 一个词法环境由一个环境记录项和可能为空的外部词法环境引用构成</p>

<p>词法环境 = 词法环境记录项 + 外部词法环境<br/>
外部词法环境是包含内部词法环境的词法环境， 外部词法环境可能有多个内部词法环境</p>

<p>环境记录项 = 声明式环境记录项 || 对象式环境记录项</p>

<h2>执行环境</h2>

<ul>
<li><p>javascript引擎在执行每个函数实例时，都会创建一个执行环境（execution context）</p></li>
<li><p>执行环境中包含一个调用对象（call object）, 调用对象是一个scriptObject结构（scriptObject是与函数相关的一套静态系统，与函数实例的生命周期保持一致），用来保存内部变量表varDecls、内嵌函数表funDecls、父级引用列表upvalue等语法分析结构。 varDecls和funDecls等信息是在语法分析阶段就已经得到，并保存在语法树中</p></li>
<li><p>函数实例执行时，会将这些信息从语法树复制到scriptObject上</p></li>
</ul>


<h2>Executable Code and Execution contents</h2>

<p>“执行上下文”可以看做当前代码的运行环境或者作用域。</p>

<h4>Types of Executable Code</h4>

<ul>
<li><p> Global Code：全局级别的代码 – 这个是默认的代码运行环境，一旦代码被载入，引擎最先进入的就是这个环境。</p></li>
<li><p> Function Code: 函数级别的代码 – 当执行一个函数时，运行函数体中的代码。</p></li>
<li><p> Eval Code:  在Eval函数内运行的代码，在特定的一次对 eval 的调用过程中，eval 代码作为该程序的 Global Code 部分。</p></li>
</ul>


<p>每当调用执行一个函数时，引擎就会自动新建出一个函数上下文, 函数中函数也可能调用另一个函数，这样又创建一个执行环境， 也被称为上下文堆栈</p>

<h4>执行上下文堆栈</h4>

<ul>
<li><p>ECMAScript的程序执行都可以看做是一个执行上下文堆栈[execution context (EC) stack]。堆栈的顶部就是处于激活状态的上下文， 堆栈最底部即为全局执行上下文环境[global execution context]；</p></li>
<li><p>激活其它上下文的某个上下文被称为 调用者(caller) 。被激活的上下文被称为被调用者(callee) 。被调用者同时也可能是调用者(比如一个在全局上下文中被调用的函数调用某些自身的内部方法)。</p></li>
<li><p>当一个caller激活了一个callee，那么这个caller就会暂停它自身的执行，然后将控制权交给这个callee. 于是这个callee被放入堆栈，称为进行中的上下文[running/active execution context]. 当这个callee的上下文结束之后，会把控制权再次交给它的caller，然后caller会在刚才暂停的地方继续执行。在这个caller结束之后，会继续触发其他的上下文。一个callee可以用返回（return）或者抛出异常（exception）来结束自身的上下文。</p></li>
</ul>


<h4>执行上下文的建立过程</h4>

<p>每当调用一个函数时，一个新的执行上下文就会被创建出来。然而，在javascript引擎内部，这个上下文的创建过程具体分为两个阶段:</p>

<ol>
<li><p>建立阶段(发生在当调用一个函数时，但是在执行函数体内的具体代码以前)</p>

<ul>
<li>建立变量，函数，arguments对象，参数</li>
<li>建立作用域链</li>
<li>确定this的值</li>
</ul>
</li>
<li><p>代码执行阶段:</p>

<ul>
<li>变量赋值，函数引用，执行其它代码</li>
</ul>
</li>
</ol>


<p>实际上，可以把执行上下文看做一个对象，其下包含了以上3个属性：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'> <span class="nx">executionContextObj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">variableObject</span><span class="o">:</span> <span class="p">{</span> <span class="cm">/* 函数中的arguments对象, 参数, 内部的变量以及函数声明 */</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">scopeChain</span><span class="o">:</span> <span class="p">{</span>   <span class="cm">/* variableObject 以及所有父执行上下文中的variableObject */</span> <span class="p">},</span>
</span><span class='line'>    <span class="k">this</span><span class="o">:</span> <span class="p">{}</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>变量对象(variable object)</h2>

<p>变量对象(缩写为VO)是一个与执行上下文相关的特殊对象，它存储着在上下文中声明的以下内容：</p>

<ol>
<li>变量 (var, 变量声明)</li>
<li>函数声明 (FunctionDeclaration, 缩写为FD);</li>
<li>函数的形参
注： 只有全局上下文的变量对象允许通过VO的属性名称来间接访问</li>
</ol>


<h4>不同执行上下文中的变量对象</h4>

<p>对于所有类型的执行上下文来说，变量对象的一些操作(如变量初始化)和行为都是共通的。从这个角度来看，把变量对象作为抽象的基本事物来理解更为容易。同样在函数上下文中也定义和变量对象相关的额外内容。</p>

<p>抽象变量对象VO (变量初始化过程的一般行为)</p>

<ol>
<li><p>全局上下文变量对象GlobalContextVO</p>

<p> (VO === this === global), VO:</p>

<ul>
<li>所有函数声明(FunctionDeclaration, FD)</li>
<li>所有变量声明(var, VariableDeclaration)</li>
</ul>
</li>
<li><p>函数上下文变量对象FunctionContextVO</p>

<p> (VO === AO, 并且添加了arguments和形参), AO:</p>

<ul>
<li>普通参数(formal parameters) 与特殊参数(arguments)对象</li>
<li>所有函数声明(FunctionDeclaration, FD)</li>
<li>所有变量声明(var, VariableDeclaration)</li>
</ul>
</li>
<li><p>eval上下文</p>

<ul>
<li>eval会使用全局变量对象或调用者的变量对象(eval的调用来源)</li>
<li>变量声明在顺序上跟在函数声明和形式参数声明之后，但不会干扰AO中已经存在的同名函数声明或形式参数声明</li>
<li>(function x() {}); 类似这样的函数表达式并不会影响AO</li>
<li>不管是使用var关键字(在全局上下文)还是不使用var关键字(在任何地方)，都可以声明一个变量”。 请记住，这是错误的概念； 任何时候，变量只能通过使用var关键字才能声明。</li>
</ul>
</li>
</ol>


<h4>变量的特性</h4>

<ol>
<li>变量有一个特性(attribute)：{DontDelete},这个特性的含义就是不能用delete操作符直接删除变量属性</li>
<li>eval上下文，变量没有{DontDelete}特性, 使用一些调试工具(例如：Firebug)的控制台测试该实例时，请注意，Firebug同样是使用eval来执行控制台里你的代码。因此，变量属性同样没有{DontDelete}特性，可以被删除。</li>
</ol>


<h2>作用域</h2>

<p>javascript变量的作用域是在定义时决定而不是执行时决定，也就是说词法作用域取决于源码，编译器通过静态分析就能确定，因此词法作用域也叫做静态作用域（static scope）。但需要注意，with和eval的语义无法仅通过静态技术实现，所以只能说javascript的作用域机制非常接近词法作用域（lexical scope）</p>

<h2>作用域链</h2>

<p>在ECMAScript中，会用到内部函数[inner functions]，在这些内部函数中，我们可能会引用它的父函数变量，或者全局的变量。我们把这些变量对象成为上下文作用域对象[scope object of the context]. 类似于上面讨论的原型链[prototype chain]，我们在这里称为作用域链[scope chain]</p>

<p>作用域链与一个执行上下文相关, 用于在标识符解析中变量查找。 标示符[Identifiers]可以理解为变量名称、函数声明和普通参数</p>

<p>函数上下文的作用域链在函数调用时创建的，包含活动对象和这个函数内部的[[scope]]属性。其scope定义如下：Scope = AO + [[Scope]]</p>

<p>函数在被创建时保存外部作用域，是因为这个 被保存的作用域链(saved scope chain) 将会在未来的函数调用中用于变量查找。这种形式的作用域称为静态作用域[static/lexical scope]</p>

<p>在上下文中示意如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">activeExecutionContext</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">VO</span><span class="o">:</span> <span class="p">{...},</span> <span class="c1">// or AO</span>
</span><span class='line'>    <span class="k">this</span><span class="o">:</span> <span class="nx">thisValue</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">Scope</span><span class="o">:</span> <span class="p">[</span> <span class="c1">// Scope chain</span>
</span><span class='line'>      <span class="c1">// 所有变量对象的列表</span>
</span><span class='line'>      <span class="c1">// for identifiers lookup</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">foo</span><span class="p">();</span> <span class="c1">// 10, but not 20</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>


<p>在标识符解析过程中，使用函数创建时定义的词法作用域－－变量解析为10，而不是20。此外，这个例子也清晰的表明，一个函数（这个例子中为从函数“foo”返回的匿名函数）的[[scope]]持续存在，即使是在函数创建的作用域已经完成之后。</p>

<h4>补充说明</h4>

<ol>
<li><p>通过构造函数创建的函数的[[scope]]属性总是唯一的全局对象</p></li>
<li><p>在代码执行阶段有两个声明能修改作用域链。这就是with声明和catch语句</p></li>
<li><p>在代码执行过程中，如果使用with或者catch语句就会改变作用域链。而这些对象都是一些简单对象，他们也会有原型链。这样的话，作用域链会从两个维度来搜寻。</p></li>
<li><p>在解释执行阶段， 遇到变量需要解析时，会首先从当前执行环境的活动对象中查找， 如果没有找到而且该执行环境拥有者有prototype属性时， 则会从prototype链中查找， 否则将会按照作用域链查找；</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javascript运行机制]]></title>
    <link href="http://mininice.github.io/blog/2013/09/18/yun-xing-ji-zhi/"/>
    <updated>2013-09-18T22:07:00+08:00</updated>
    <id>http://mininice.github.io/blog/2013/09/18/yun-xing-ji-zhi</id>
    <content type="html"><![CDATA[<h2>运行顺序</h2>

<ol>
<li>读入第一个代码段（js执行引擎并非一行一行地执行程序，而是一段一段地分析执行的）</li>
<li>做词法分析和语法分析，没错则解析成语法树，有错则报语法错误并跳转到步骤5</li>
<li>对var变量和function定义做预解析</li>
<li>执行代码段，有错则报错（比如变量未定义）</li>
<li>如果还有下一个代码段，则读入下一个代码段，重复步骤2</li>
<li>结束
</code></pre></li>
</ol>


<p>注: javascript是按块执行， 但是不同块属于同一个全局作用域， 即块之间的变量和函数是可以共享的；</p>

<h2>词法分析</h2>

<ol>
<li><p>词法文法</p>

<ul>
<li><p>tokens： 文法终结符， 空白和注释之外的输入元素，如：ECMAScript语言的保留字，标识符，字面量，标点符号等</p></li>
<li><p>行结束符虽然不被视为tokens，但会成为输入元素流的一部分，用于引导处理自动插入分号</p></li>
<li><p>空白和单行注释会被简单的丢弃，不会出现在语法文法的输入元素的流中</p></li>
<li><p>词法文法有两个目标符。InputElementDiv 目标符用在允许除法 (/) 或除赋值 (/=) 运算符开始的语法文法上下文中。InputElementRegExp 目标符用在其他语法文法上下文。</p></li>
</ul>
</li>
<li><p>词法分析</p>

<p> 当一个字符流被解析为 ECMAScript 程序，它首先通过词法文法应用程序反复转换为一个输入元素流；然后再用一个语法文法应用程序解析这个输入元素流。当输入元素流没有更多 tokens 时，如果 tokens 不能解析为 Program 目标非终结符的单一实例，那么程序在语法上存在错误。</p></li>
<li><p>目标非终结符: TODO</p></li>
</ol>


<h2>语法分析</h2>

<p>将词法分析阶段产生的记号， 生成语法树，如果无法生成，则报错；</p>

<ol>
<li>符号表：记录变量、函数、类</li>
<li>语法树：程序结构的树形表示，将此树形结构生成中间代码</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[原型链]]></title>
    <link href="http://mininice.github.io/blog/2013/09/18/yuan-xing-lian/"/>
    <updated>2013-09-18T20:16:00+08:00</updated>
    <id>http://mininice.github.io/blog/2013/09/18/yuan-xing-lian</id>
    <content type="html"><![CDATA[<h3>原型对象</h3>

<h4>JS原型对象初始化</h4>

<p>参考函数创建的简单步骤，如下:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>
</span><span class='line'><span class="nx">F</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NativeObject</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//第一步：设置Class:function;</span>
</span><span class='line'><span class="nx">F</span><span class="p">.[[</span><span class="nx">Class</span><span class="p">]]</span> <span class="o">=</span> <span class="s2">&quot;Function&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//第二步：函数对象的隐式prototype指向Function的显示原型, function的prototype也是一个对象, 是Object对象的实例, Object又是由Function构建出来的， 所以可以循环此步骤;</span>
</span><span class='line'><span class="nx">F</span><span class="p">.[[</span><span class="nx">Prototype</span><span class="p">]]</span> <span class="o">=</span> <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//第三步：初始化</span>
</span><span class='line'><span class="nx">F</span><span class="p">.[[</span><span class="nx">Call</span><span class="p">]]</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">reference</span> <span class="nx">to</span> <span class="kd">function</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">F</span><span class="p">.[[</span><span class="nx">Construct</span><span class="p">]]</span> <span class="o">=</span> <span class="nx">internalConstructor</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//第四步：初始化当前执行上下文的作用域链</span>
</span><span class='line'><span class="nx">F</span><span class="p">.[[</span><span class="nx">Scope</span><span class="p">]]</span> <span class="o">=</span> <span class="nx">activeContext</span><span class="p">.</span><span class="nx">Scope</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 如果函数通过new Function(...)来创建，那么</span>
</span><span class='line'><span class="nx">F</span><span class="p">.[[</span><span class="nx">Scope</span><span class="p">]]</span> <span class="o">=</span> <span class="nx">globalContext</span><span class="p">.</span><span class="nx">Scope</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//第五步：初始化传入参数的个数</span>
</span><span class='line'><span class="nx">F</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="nx">countParameters</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//第六步：F对象创建的原型</span>
</span><span class='line'><span class="nx">__objectPrototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class='line'><span class="nx">__objectPrototype</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">=</span> <span class="nx">F</span>
</span><span class='line'><span class="nx">F</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">__objectPrototype</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nx">F</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h4>什么是原型对象</h4>

<ul>
<li><p>从上面可以看出, 每一个构造函数都有一个原型属性, 称为prototype, 它指向一个对象, 这个对象称为原型对象;</p></li>
<li><p>默认所有原型对象自动获得constructor属性；constructor又引用了函数本身，所以也形成了JS中的构造函数和prototype的循环引用；</p></li>
</ul>


<h4>原型对象的问题</h4>

<ul>
<li>原型对象是由所有实例共享，对于包含引用类型值的属性来说，修改会影响到所有的实例；</li>
<li>原型模式广泛应用于原生的引用类型如Object、Array、String等, 但不推荐在程序中修改原生对象的原型, 容易导致命名冲突；</li>
</ul>


<h3>原型链</h3>

<p>一般的解释:</p>

<ul>
<li>所有对象都可以有原型，并且原型也是对象，所以接着它们也可以有原型，原型又可以有原型，如此就形成了所谓的原型链。当链条中的对象有一个值为null 的原型时，原型链终止。</li>
</ul>


<p>ECMA的解释：</p>

<ul>
<li>Every object created by a constructor has an implicit reference (called the object’s prototype) to the value of its constructor’s “prototype” property. Furthermore, a prototype may have a non-null implicit reference to its prototype, and so on; this is called the prototype chain.</li>
</ul>


<p>看了如上中文解释，你肯定会困扰吧？是因为它只一味的提到原型； 而没有对隐式的原型 [[prototype]]和显示的prototype进行区分；</p>

<p>所以你可能会认为, 按照第一种解释如下代码先寻找A.prototype, 发现A.prototype = null; 原型链终止，A.toString是不是会报undefined呢？</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//分析function A的原型链</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">A</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">A</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">A</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>再看英文解释：
Every object created by a constructor has an implicit reference (called the object’s prototype) to the value of its constructor’s “prototype” property；</p>

<p>非常清晰：</p>

<ul>
<li>所有由构造器创建的对象都有一个隐式的prototype， 它指向构造器的prototype属性</li>
<li>所以原型链其实是由当前对象的隐式prototype指针指向的对象的隐式prototype指针指向的对象的&hellip;., 直到隐式prototype指向的对象为空为至；有点饶；</li>
</ul>


<h3>Object的prototype是null吗?</h3>

<p>解释一：Object 构造器的默认原型值为null；</p>

<p>解释二：</p>

<p>15.2.4 Properties of the Object Prototype Object</p>

<p>The value of the [[Prototype]] internal property of the Object prototype object is null, the value of the [[Class]] internal property is &ldquo;Object&rdquo;, and the initial value of the [[Extensible]] internal property is true.</p>

<p>解释一也存在和上面一样的问题,而英文的解释则非常明显:</p>

<p>并非<code>Object.prototype = null</code>而是<code>function Object</code>中的隐式的<code>prototype</code>为<code>null</code>, 如下:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nb">Object</span><span class="p">()</span> <span class="p">{};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.[[</span><span class="nx">prototype</span><span class="p">]]</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>
</span><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.[[</span><span class="nx">prototype</span><span class="p">]]</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>示例</h3>

<p>看了上述的描述， 如果你完全理解了显示prototype和隐式prototype，我想你应该会很快n能画出如下对象的原型链了。试试看吧：</p>

<p>示例1：请描述a对象的原型链</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">A</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">A</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">b</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">c</span><span class="o">:</span> <span class="mi">3</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">A</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>示例二：请描述b对象的原型链</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">A</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">A</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">b</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">c</span><span class="o">:</span> <span class="mi">3</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">B</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">B</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">A</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">B</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello world]]></title>
    <link href="http://mininice.github.io/blog/2013/09/18/test/"/>
    <updated>2013-09-18T12:11:00+08:00</updated>
    <id>http://mininice.github.io/blog/2013/09/18/test</id>
    <content type="html"><![CDATA[<p>blog终于搭起来了, 想起了一句话： 少了大的惊喜, 也要找点小快乐!</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;mininice&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">gender</span><span class="o">:</span> <span class="s1">&#39;女&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">company</span><span class="o">:</span> <span class="s1">&#39;MEITUAN&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">position</span><span class="o">:</span> <span class="s1">&#39;FE&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">skills</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;javascript&quot;</span><span class="p">,</span> <span class="s2">&quot;css&quot;</span><span class="p">,</span> <span class="s2">&quot;html&quot;</span><span class="p">],</span>
</span><span class='line'>        <span class="nx">email</span><span class="o">:</span> <span class="s1">&#39;thinkable.love@gmail.com&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">})();</span>
</span><span class='line'>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
